/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/hrishin/podset-operator/pkg/apis/demo/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PodSetLister helps list PodSets.
type PodSetLister interface {
	// List lists all PodSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PodSet, err error)
	// PodSets returns an object that can list and get PodSets.
	PodSets(namespace string) PodSetNamespaceLister
	PodSetListerExpansion
}

// podSetLister implements the PodSetLister interface.
type podSetLister struct {
	indexer cache.Indexer
}

// NewPodSetLister returns a new PodSetLister.
func NewPodSetLister(indexer cache.Indexer) PodSetLister {
	return &podSetLister{indexer: indexer}
}

// List lists all PodSets in the indexer.
func (s *podSetLister) List(selector labels.Selector) (ret []*v1alpha1.PodSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodSet))
	})
	return ret, err
}

// PodSets returns an object that can list and get PodSets.
func (s *podSetLister) PodSets(namespace string) PodSetNamespaceLister {
	return podSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodSetNamespaceLister helps list and get PodSets.
type PodSetNamespaceLister interface {
	// List lists all PodSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PodSet, err error)
	// Get retrieves the PodSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PodSet, error)
	PodSetNamespaceListerExpansion
}

// podSetNamespaceLister implements the PodSetNamespaceLister
// interface.
type podSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodSets in the indexer for a given namespace.
func (s podSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PodSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodSet))
	})
	return ret, err
}

// Get retrieves the PodSet from the indexer for a given namespace and name.
func (s podSetNamespaceLister) Get(name string) (*v1alpha1.PodSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("podset"), name)
	}
	return obj.(*v1alpha1.PodSet), nil
}
